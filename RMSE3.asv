function [error] = RMSE3(Points_LAT,Points_PA0)

% load in Point Sets
load("Calib_Beads2D.mat")
load("Calib_Beads3D.mat")
load("Vertebrae2D.mat")
fprintf("Hello World")

%% Get 3D reconstruction of spine using all calibration beads
[p3D_ideal] = reconstruct_spine(Calib_Beads3D,...
    Beads2D_LAT, Beads2D_PA0,...
    Vertebrae_LAT, Vertebrae_PA0,...
    (1:size(Beads2D_LAT,2)), (1:size(Beads2D_PA0,2))); % take all calibration beads
assignin('base','p3D_ideal',p3D_ideal)

%% Get simplieied 3D reconstruction of spine using only some calibration beads
[p3D] = reconstruct_spine(Calib_Beads3D,...
    Beads2D_LAT, Beads2D_PA0,...
    Vertebrae_LAT, Vertebrae_PA0,...
    Points_LAT, Points_PA0); % tae only a few selected calibration beads
assignin('base','p3D',p3D)

%% Put 3D Points all in [3xN] matrix (intead of [3x6xN_vertebrae])
num_vertebrae = size(p3D_ideal,3);
ideal = zeros(3,6*num_vertebrae);
simple = ideal;
for k = 1:num_vertebrae
    ideal((1+(k-1)*6):(6+(k-1)*6)) = p3D_ideal(:,:,k);
    simple((1+(k-1)*6):(6+(k-1)*6)) = p3D(:,:,k);
end

%% Calculate 3D RMSE between ideal and simplified reconstruction
num_3D_points = size(p3D_ideal,3);

% in x direction:
sum = 0;
for k = 1:num_3D_points
    sum = sum + norm(
end





error = [RMSE3x;RMSE3y;RMSE3z];

end

